<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

    <Style x:Key="HeaderLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="FontSize" Value="40"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Jura"/>
    </Style>
    <Style x:Key="UserHeaderLabelStyle" TargetType="Label" BasedOn="{StaticResource HeaderLabelStyle}">
        <Setter Property="FontSize" Value="25" />
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>
    <Style x:Key="InspectionLabelStyle" TargetType="Label" BasedOn="{StaticResource HeaderLabelStyle}">
        <Setter Property="FontSize" Value="30" />
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>
    <Style x:Key="InfoLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="FontSize" Value="30"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontFamily" Value="Jura"/>
    </Style>
    <Style x:Key="AddItemLabelStyle" TargetType="Label" BasedOn="{StaticResource InfoLabelStyle}">
        <Setter Property="FontSize" Value="40"/>
    </Style>
    <Style x:Key="DialogLabelStyle" TargetType="Label">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
    </Style>
    <Style x:Key="TitleLabelStyle" TargetType="Label">
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="PhotoStyle" TargetType="{x:Type Image}">
        <Setter Property="Stretch" Value="Uniform"/>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseLeftButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Width" Duration="0:0:0.2" To="600"  />
                            <DoubleAnimation Storyboard.TargetProperty="Height" Duration="0:0:0.2" To="600"  />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseRightButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Width" Duration="0:0:0.2" To="200"  />
                            <DoubleAnimation Storyboard.TargetProperty="Height" Duration="0:0:0.2" To="200"  />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SendMessageButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="CadetBlue"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="HeaderButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="40"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Canvas.Top" Value="30"/>
    </Style>
    <Style x:Key="DialogButtonStyle" TargetType="Button">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                                BorderThickness="3" 
                                Background="Transparent"
                                SnapsToDevicePixels="true"
                                CornerRadius="10">
                        <ContentPresenter x:Name="contentPresenter"
                                              Focusable="False" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="FontWeight" Value="Bold" />
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                            <Setter Property="Foreground" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DialogButtonStyle2" TargetType="Button" BasedOn="{StaticResource DialogButtonStyle}">
        <Setter Property="FontSize" Value="30"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="AddItemButtonStyle" TargetType="Button" BasedOn="{StaticResource SendMessageButtonStyle}">
        <Setter Property="FontSize" Value="35"/>
    </Style>

    <Style TargetType="TextBox" x:Key="TextBoxStyle">
        <Setter Property="FontFamily" Value="Jura"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border>
                        <Grid Width="{TemplateBinding Width}">
                            <Border BorderThickness="0" Background="#bababa"  CornerRadius="5">
                                <TextBox SelectionBrush="LightGray"  VerticalContentAlignment="Center"
                                    BorderBrush="{x:Null}" Background="{x:Null}" BorderThickness="0"
                                    Text="{Binding RelativeSource={RelativeSource TemplatedParent},
                                    Path=Text, UpdateSourceTrigger=PropertyChanged}"
                                         TextWrapping="{TemplateBinding TextWrapping}"/>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self},
                    Path=(Validation.Errors)[0].ErrorContent}" />
                <Setter Property="Foreground" Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="InfoTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="30"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="MaxWidth" Value="220"/>
        <Setter Property="MinWidth" Value="60"/>
        <Setter Property="MaxHeight" Value="200"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border  x:Name="border">
                        <Grid Width="{TemplateBinding Width}">
                            <Border x:Name="border2" BorderThickness="0" Background="#bababa"  CornerRadius="5">
                                <TextBox x:Name="mainTxtBox" Foreground="Black"
                                    SelectionBrush="LightGray"  VerticalContentAlignment="Center"
                                         TextWrapping="{TemplateBinding TextWrapping}"
                                        BorderBrush="{x:Null}" Background="{x:Null}" BorderThickness="0" IsEnabled="{TemplateBinding IsEnabled}"
                                        Text="{Binding RelativeSource={RelativeSource TemplatedParent},
                                        Path=Text, UpdateSourceTrigger=PropertyChanged}"/>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border2" Property="Background" Value="Transparent"/>
                            <Setter TargetName="mainTxtBox" Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ContentTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource TextBoxStyle}">
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    <Style x:Key="InfoTextBoxStyle2" TargetType="TextBox" BasedOn="{StaticResource InfoTextBoxStyle}">
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    <Style TargetType="TextBox" x:Key="EntryMessageTextBoxStyle">
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="LightGray"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Width" Value="500"/>
        <Setter Property="Height" Value="60"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="border">
                        <Grid Width="{TemplateBinding Width}">
                            <Border BorderThickness="0" Background="#bababa"  CornerRadius="5">
                                <TextBox SelectionBrush="LightGray"  VerticalContentAlignment="Center"
                                    BorderBrush="{x:Null}" Background="{x:Null}" BorderThickness="0"
                                    Text="{Binding RelativeSource={RelativeSource TemplatedParent},
                                    Path=Text, UpdateSourceTrigger=PropertyChanged}"/>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MessageTextBlockStyle" TargetType="TextBlock">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    
    <Style TargetType="ListBoxItem">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,10"/>
    </Style>
</ResourceDictionary>